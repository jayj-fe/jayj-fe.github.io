<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jayj-fe.github.io//</id><title>Jay.J</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-08-19T23:52:14+09:00</updated> <author> <name>jayj</name> <uri>https://jayj-fe.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://jayj-fe.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://jayj-fe.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 jayj </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Cookie와 Session의 차이는 무엇일까</title><link href="https://jayj-fe.github.io//posts/CookieVsSeccion/" rel="alternate" type="text/html" title="Cookie와 Session의 차이는 무엇일까" /><published>2021-05-23T18:44:39+09:00</published> <updated>2021-05-23T18:44:39+09:00</updated> <id>https://jayj-fe.github.io//posts/CookieVsSeccion/</id> <content src="https://jayj-fe.github.io//posts/CookieVsSeccion/" /> <author> <name>jayj</name> </author> <category term="HTTP" /> <summary> 쿠키(Cookie) 사용자가 어떠한 웹 사이트를 방문할 경우 사용자의 컴퓨터에 저장하는 작은 기록 정보 파일이다. 사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송한다. 사용자의 상태 정보를 로컬에 저장했다가 필요시 정보를 참조하거나 재사용 한다. 사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다는 특징이 있다. 쿠키의 구성 요소 이름 : 각각의 쿠키를 구별하는 데 사용되는 이름 값 : 쿠키의 이름과 관련된 값 유효시간 : 쿠키의 유지시간 도메인 : 쿠키를 전송할 도메인 경로 : 쿠키를 전송할 요청 경로 쿠키 특징 이름, 값, 만료일(저장 기... </summary> </entry> <entry><title>RESTful API 이란</title><link href="https://jayj-fe.github.io//posts/RESTfulAPI/" rel="alternate" type="text/html" title="RESTful API 이란" /><published>2021-05-15T18:44:39+09:00</published> <updated>2021-05-15T18:44:39+09:00</updated> <id>https://jayj-fe.github.io//posts/RESTfulAPI/</id> <content src="https://jayj-fe.github.io//posts/RESTfulAPI/" /> <author> <name>jayj</name> </author> <category term="HTTP" /> <summary> RESTful API란? REST를 기반 API를 의미합니다. REST은 무엇인지, REST API는 무엇인지, RESTful API는 무엇인지 알아보려고합니다. 1. RESTful API에서 REST 란? REST는 Representational State Transfer의 약자로써 풀어서 설명하자면 자원을 이름으로 구분해 해당 자원의 상태를 주고 받는 것을 말한다. 웹에 존재하는 자원(이미지, 동영상, DB)에 대한 CRUD 요청을, 고유한 URI(Resource와 Method)로 표현하여 특정한 형태로 전달하는 방법이다. CRUD : Create, Read, Update, Delete Create : 데이터 생성(POST) Read : 데이터 조회... </summary> </entry> <entry><title>통신을 위한 라이브러리, Axios</title><link href="https://jayj-fe.github.io//posts/Axios/" rel="alternate" type="text/html" title="통신을 위한 라이브러리, Axios" /><published>2021-05-02T18:44:39+09:00</published> <updated>2021-05-02T18:44:39+09:00</updated> <id>https://jayj-fe.github.io//posts/Axios/</id> <content src="https://jayj-fe.github.io//posts/Axios/" /> <author> <name>jayj</name> </author> <category term="axios" /> <summary> “Axios는 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리입니다.” Axios 공식문서에 나와 있는 Axios의 정의이다. 자바스크립트의 Fetch API와 비슷한 기능을 가지고 있다. axios vs fetch 요청 객체에 URL을 가지고 있다. 요청 개체에 URL이 없다 . 쉽게 설치할 수 있는 독립 실행형 타사 패키지 이다. 대부분의 최신 브라우저에 내장되어 있다.설치가 필요 없다. 내장된 XSRF 보호 기능 있다. 별도 보호 없다. data 속성을 사용한다 . body 속성을 사용한다 . data는 객체가 포함되어 있다 .... </summary> </entry> <entry><title>Vue Lifecycle 이해하기</title><link href="https://jayj-fe.github.io//posts/VueLifecycle/" rel="alternate" type="text/html" title="Vue Lifecycle 이해하기" /><published>2021-04-28T18:44:39+09:00</published> <updated>2021-04-28T18:44:39+09:00</updated> <id>https://jayj-fe.github.io//posts/VueLifecycle/</id> <content src="https://jayj-fe.github.io//posts/VueLifecycle/" /> <author> <name>jayj</name> </author> <category term="vue.js" /> <summary> Vue Lifecycle 이해하기 모든 Vue 앱은 Vue 함수로 새 Vue 인스턴스를 만드는 것부터 시작한다. var vm = new Vue({ // 옵션 }) Vue 인스턴스는 생성될 때, 일련의 초기화 단계를 거친다. 예를들어 아래와 같은 경우가 있다. 데이터 관찰 설정이 필요한 경우 템플릿을 컴파일 하는 경우 인스턴스를 DOM에 마운트하는 경우 데이터가 변경되어 DOM을 업데이트 하는 경우 이미지로 보는 라이프 사이클 1. Create 단계 라이프 사이클 훅에서 제일 처음 실행되는 Create 단계이다. DOM이 생성되기 이전에 실행되는 훅으로써 DOM에 접근하거나 this.$el 을 사용하지 못한다. 이 단계는 beforeCreate 훅과 cr... </summary> </entry> <entry><title>Vuex가 무엇인가?</title><link href="https://jayj-fe.github.io//posts/Vuex/" rel="alternate" type="text/html" title="Vuex가 무엇인가?" /><published>2021-04-18T18:44:39+09:00</published> <updated>2021-04-18T18:44:39+09:00</updated> <id>https://jayj-fe.github.io//posts/Vuex/</id> <content src="https://jayj-fe.github.io//posts/Vuex/" /> <author> <name>jayj</name> </author> <category term="vue.js" /> <summary> Vuex가 무엇인가? Vue.js에 대한 상태 관리 패턴이자 라이브러리이다. 모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경할 수 있다. 상태 관리란? 간단한 Vue 코드로 확인해보겠다. new Vue({ // 상태 data () { return { count : 0 } }, // 뷰 template : ` &amp;lt;div&amp;gt; 8 &amp;lt;/div&amp;gt; `, // 액션 methods: { increment () { this.count++ } } }) 상태(State) : 앱을 작동하는 소스이다. 뷰(View) : 상태를 보여주는 매핑이다. 액션... </summary> </entry> </feed>

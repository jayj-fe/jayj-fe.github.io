[ { "title": "Cookie와 Session의 차이는 무엇일까", "url": "/posts/CookieVsSeccion/", "categories": "HTTP", "tags": "javascript, HTTP", "date": "2021-05-23 18:44:39 +0900", "snippet": "쿠키(Cookie)사용자가 어떠한 웹 사이트를 방문할 경우 사용자의 컴퓨터에 저장하는 작은 기록 정보 파일이다.사용자가 따로 요청하지 않아도 브라우저가 Request시에 Request Header를 넣어서 자동으로 서버에 전송한다.사용자의 상태 정보를 로컬에 저장했다가 필요시 정보를 참조하거나 재사용 한다.사용자 인증이 유효한 시간을 명시할 수 있으며, 유효 시간이 정해지면 브라우저가 종료되어도 인증이 유지된다는 특징이 있다.쿠키의 구성 요소 이름 : 각각의 쿠키를 구별하는 데 사용되는 이름 값 : 쿠키의 이름과 관련된 값..." }, { "title": "RESTful API 이란", "url": "/posts/RESTfulAPI/", "categories": "HTTP", "tags": "HTTP", "date": "2021-05-15 18:44:39 +0900", "snippet": "RESTful API란?REST를 기반 API를 의미합니다.REST은 무엇인지, REST API는 무엇인지, RESTful API는 무엇인지 알아보려고합니다.1. RESTful API에서 REST 란?REST는 Representational State Transfer의 약자로써 풀어서 설명하자면자원을 이름으로 구분해 해당 자원의 상태를 주고 받는 것을 말한다.웹에 존재하는 자원(이미지, 동영상, DB)에 대한 CRUD 요청을,고유한 URI(Resource와 Method)로 표현하여 특정한 형태로 전달하는 방법이다. CRUD..." }, { "title": "통신을 위한 라이브러리, Axios", "url": "/posts/Axios/", "categories": "axios", "tags": "javascript, axios, HTTP", "date": "2021-05-02 18:44:39 +0900", "snippet": "“Axios는 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리입니다.”Axios 공식문서에 나와 있는 Axios의 정의이다.자바스크립트의 Fetch API와 비슷한 기능을 가지고 있다.axios vs fetch 요청 객체에 URL을 가지고 있다. 요청 개체에 URL이 없다 . 쉽게 설치할 수 있는 독립 실행형 타사 패키지 이다. 대부분의 최신 브라우저에 내장되어 있다.설치가 필요 없다. 내장된 XSRF 보호 기능 있다. 별도 보호..." }, { "title": "Vue Lifecycle 이해하기", "url": "/posts/VueLifecycle/", "categories": "vue.js", "tags": "javascript, vue.js, VueLifecycle", "date": "2021-04-28 18:44:39 +0900", "snippet": "Vue Lifecycle 이해하기모든 Vue 앱은 Vue 함수로 새 Vue 인스턴스를 만드는 것부터 시작한다.var vm = new Vue({ // 옵션})Vue 인스턴스는 생성될 때, 일련의 초기화 단계를 거친다.예를들어 아래와 같은 경우가 있다. 데이터 관찰 설정이 필요한 경우 템플릿을 컴파일 하는 경우 인스턴스를 DOM에 마운트하는 경우 데이터가 변경되어 DOM을 업데이트 하는 경우이미지로 보는 라이프 사이클1. Create 단계라이프 사이클 훅에서 제일 처음 실행되는 Create 단계이다.DOM이 생성되기 이전..." }, { "title": "Vuex가 무엇인가?", "url": "/posts/Vuex/", "categories": "vue.js", "tags": "javascript, vue.js, Vuex", "date": "2021-04-18 18:44:39 +0900", "snippet": "Vuex가 무엇인가?Vue.js에 대한 상태 관리 패턴이자 라이브러리이다.모든 컴포넌트에 대한 중앙 집중식 저장소 역할을 하며 예측 가능한 방식으로 상태를 변경할 수 있다.상태 관리란?간단한 Vue 코드로 확인해보겠다.new Vue({ // 상태 data () { return { count : 0 } }, // 뷰 template : ` &amp;lt;div&amp;gt; 8 &amp;lt;/div&amp;gt; `, // 액션 methods: { increment () { ..." }, { "title": "Vue Router 사용하기", "url": "/posts/VueRouter/", "categories": "vue.js", "tags": "javascript, vue.js, vue Router", "date": "2021-04-10 18:44:39 +0900", "snippet": "Vue Router 란‘Vue 라우터는 Vue.js (opens new window)의 공식 라우터이며,Vue.js를 사용한 싱글 페이지 앱(SPA)을 쉽게 만들 수 있도록 Vue.js의 코어와 긴밀히 통합되어 있다.’라고 공식문서에 설명되어있다.싱글 페이지 앱(SPA)는 최초에 한번 페이지를 로드하고 이후부터는 특정 부분만 변경하여 페이지를 보여주는 방식이다.기존의 웹 서비스는 서버로부터 데이터가 변경 및 페이지를 이동 할 때 화면 전체를 렌더링 하는 방식이였다.SPA를 사용함으로써 전체 페이지를 렌더링하는데 드는 오버헤드가..." }, { "title": "Vue-CLI", "url": "/posts/VueCLI/", "categories": "vue.js", "tags": "javascript, vue.js", "date": "2021-03-14 18:44:39 +0900", "snippet": "Vue-CLI 란Vue CLI은 Vue.js의 개발 환경을 쉽고 빠르게 구축할 수 있도록 도와주는 도구이다.cli를 이용하면, 짧은 시간내에 프로젝트의 환경을 설정할 수 있다.사용자가 조금 더 개발에 집중할 수 있도록 도와준다. CLI란 Command Line Interface의 약자로 터미널을 통해 사용자와 컴퓨터가 상호 작용하는 방식을 뜻한다.즉, 작업 명령은 사용자가 툴바 키보드 등을 통해 문자열의 형태로 입력하며, 컴퓨터로부터의 출력 역시 문자열의 형태로 주어진다. - 위키백과Vue CLI 구성요소Vue CLI는 여러..." }, { "title": "Vue.js란", "url": "/posts/whatIsVue.js/", "categories": "vue.js", "tags": "javascript, vue.js", "date": "2021-03-05 15:44:39 +0900", "snippet": "Vue.js 란 무엇인가?Vue.js의 공식문서에서는 ‘사용자 인터페이스를 만들기 위한 프로그레시브 프레임워크’ 라고 설명하고 있다.즉, 보여지는 화면을 만드는 자바스크립트 프레임워크 중의 하나이다.Vue.js는 진입장벽이 낮으며 쉽고 빠르게 개발을 할 수 있다는 것이 가장 큰 장점으로 가지고 있다. Vue.js 공식사이트장점 및 특징학습곡선이 낮다.Vue.js는 웹 개발을 단순화하고 정리하기 위해 개발된 대중적인 자바스크립트 프론트엔드 프레임워크이다.수많은 프로젝트에서 AngularJS를 사용하여 구글을 위해 작업하던 Ev..." }, { "title": "나를 괴롭히는 CORS", "url": "/posts/CORS/", "categories": "html", "tags": "html", "date": "2020-12-20 16:12:39 +0900", "snippet": " 🚨 Access to XMLHttpRequest at ‘http:// [A] ‘ from origin ‘http:// [B] ‘ has been blocked by CORS policy : No ‘Access-Control-Allow-Origin’ header is present on the requested resource.웹 프로젝트를 구축하거나 운영하다보면 한번씩은 나타나는 오류이다.그리고 생각보다 자주 나타나는 오류이기 때문에 누구나 한번쯤은 봤을거라고 생각한다.그렇기에 한번 자세히 알고 넘어가야겠다고 생각해서 정리..." }, { "title": "GET과 POST 방식", "url": "/posts/GetAndPost/", "categories": "html", "tags": "html, HTTP", "date": "2020-09-28 17:44:39 +0900", "snippet": "웹 브라우저로 어떤 사이트에 접속한다고 했을 때, 사용자는 URL을 입력하여 접근한다.HTTP 프로토콜을 통하여 사용자는 요청을 보내고 서버는 그 요청에 맞게 응답한다.그리고 그 요청의 방식에는 크게 2가지 방식이 있고 그것이 바로 GET방식과 POST방식이다GETGET 방식은 서버로부터 어떠한 정보를 조회하기 위해서 사용되는 방식이다.GET은 서버에게 요청할 때 URL에 요청을 담아 보낸다. URL의 끝에 ? 를 통하여 요청을 하는데 요청의 파라미터가 여러 개일 경우 &amp;amp;을 이용하여 요청한다.www.test.co..." }, { "title": "VanillaJs", "url": "/posts/VanillaJs/", "categories": "javascript", "tags": "javascript, VanillaJs", "date": "2020-08-25 18:44:39 +0900", "snippet": "Vanilla JS란?Vanilla JS(바닐라 자바스크립트)란 어떠한 프레임워크와 라이브러리가 적용되지 않은 날 것의 자바스크립트를 바닐라 자바스크립트라고 한다.왜 Vanilla JS 사용하는 것인가개인적인 생각이지만 배보다 배꼽이 커지는 상황도 많았던 것 같다.jQuery라는 DOM을 컨트롤 하는데에 있어서 매우 뛰어난 라이브러리가 있다.하지만 특정한 곳에서 한번만 사용할 것인데 그를 위해 jQuery를 사용한다면 효율적인 면에서 떨어진다.jQuery 또한 자바스크립트의 라이브러리이기 때문에 순수한 자바스크립트보다 속도면에..." }, { "title": "자바스크립트 엄격모드?", "url": "/posts/use_strict/", "categories": "javascript", "tags": "javascript", "date": "2020-06-11 15:44:39 +0900", "snippet": "자바스크립트 엄격모드란 ?ECMAScript 5 에서 소개되었다.기본으로 우리 사용하는 자바스크립트는 “느슨한모드(sloppy mode)”라고 불리며문법이나 살짝 벗어나는 오류 정도는 조용히 무시하고 작동되었다.“엄격한 모드(strict mod)”를 사용하면 조금 더 디테일하게 문법이나 오류를 잡아낸다.엄격모드를 사용하려면사용법은 간단하다. 엄격모드를 사용하기 위해서는 스크립트를 작성하기 전 최상단에 ‘“use strict”;’를 작성해준다&#39;use strict&#39;;function A(){ ...}var b = &..." }, { "title": "Javascript에서의 This", "url": "/posts/javascriptThis/", "categories": "javascript", "tags": "javascript", "date": "2020-04-15 17:44:39 +0900", "snippet": "this가 무엇이냐라고 누군가 물어봤을 때 의미 자체에 순간 망설였던 적이 있었다.그래서 this는 무엇이고 어떻게 동작하는 지에 대해 포스팅 하려고 한다.This 무엇이냐 넌this. 자바스크립트의 this는 호출한 객체가 저장되어있는 속성이다.console.log(this); // window기본적으로 this는 window 객체의 정보를 저장하고 있다.기본적으로 사용하는 메서드들 또한 상단에의 window를 통해 호출하기 때문이다.window.console.log(this); // window console에 찍힌 ..." }, { "title": "웹 접근성(견고성)", "url": "/posts/webAccessibility_5/", "categories": "html", "tags": "html, Web Accessibility", "date": "2020-03-22 17:44:39 +0900", "snippet": "운용의 용이성사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다. 4.1.1 마크업 오류 방지 4.2.1 웹 애플리케이션 접근성 준수4.1.1 마크업 오류 방지마크업 언어의 요소는 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없어야 한다.1) 요소의 열고 닫음잘못된 소스&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;목록&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;목록&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;목록&amp;lt;/..." }, { "title": "웹 접근성(이해의 용이성)", "url": "/posts/webAccessibility_4/", "categories": "html", "tags": "html, Web Accessibility", "date": "2020-03-21 17:44:39 +0900", "snippet": "이해의 용이성콘텐츠는 이해할 수 있어야 한다. 3.1.1 기본 언어 표시 3.2.1 사용자 요구에 따른 실행 3.3.1 콘텐츠의 선형화 3.3.2 표의 구성 3.4.1 레이블 제공 3.4.2 오류 정정3.1.1 기본 언어 표시주로 사용하는 언어를 명시해야 한다.&amp;lt;html lang=”ko”&amp;gt; HTML53.2.1 사용자 요구에 따른 실행사용자가 의도하지 않은 기능 (새 창, 초점 변화 등)은 실행되지 않아야 한다.1) 페이지 진입시 뜨는 새 창(팝업)페이지 진입시 새 창이 뜰 경우, 사용자는 ..." }, { "title": "웹 접근성(운용의 용이성)", "url": "/posts/webAccessibility_3/", "categories": "html", "tags": "html, Web Accessibility", "date": "2020-03-14 17:44:39 +0900", "snippet": "운용의 용이성사용자 인터페이스 구성요소는 조작 가능하고 내비게이션 할 수 있어야 한다. 2.1.1 키보드 사용 보장 2.1.2 초점 이동 2.1.3 조작 가능 2.2.1 응답시간 조절 2.2.2 정지 기능 제공 2.3.1 깜빡임과 번쩍임 사용 제한 2.4.1 반복 영역 건너뛰기 2.4.2 제목 제공 2.4.3 적절한 링크 텍스트2.1.1 키보드 사용 보장모든 기능은 키보드만으로도 사용할 수 있어야 한다. (PC웹)터치(touch) 기반 모바일 기기의 모든 컨트롤은 누르기 동작으로 제어할 수 있어야 한다. (모바..." }, { "title": "웹 접근성(인식의 용이성)", "url": "/posts/webAccessibility_2/", "categories": "html", "tags": "html, Web Accessibility", "date": "2020-03-07 17:44:39 +0900", "snippet": "인식의 용이성모든 콘텐츠는 사용자가 인식할 수 있어야 한다. 1.1.1 적절한 대체 텍스트 제공 1.2.1 자막 제공 1.3.1 색에 무관한 콘텐츠 인식 1.3.2 명확한 지시사항 제공 1.3.3 텍스트 콘텐츠의 명도 대비 1.3.4 자동 재생 금지 1.3.5 콘텐츠 간의 구분1.1.1 적절한 대체 텍스트 제공텍스트 아닌 콘텐츠는 그 의미나 용도를 이해할 수 있도록 대체 텍스트를 제공해야 한다.1) 의미가 있는 이미지는 대체 텍스트를 제공한다.잘못된 소스&amp;lt;img src=&quot;test.jpg&quo..." }, { "title": "웹 접근성이란", "url": "/posts/webAccessibility_1/", "categories": "html", "tags": "html, Web Accessibility", "date": "2020-02-29 17:44:39 +0900", "snippet": "이전 회사에서 웹 접근성에 대해 공부를 했었다.공부했던 내용을 정리해두면 좋겠다는 생각이 있었는데,미루고 미루다가 이제 정리를 한다.웹 접근성(Web Accessibility)이란웹 접근성이란 어떠한 사용자가 접근을 하더라도, 동일한 정보를 제공할 수 있도록 보장하는 것이다.즉, 장애인, 고령자등 모든 사람이 비장애인과 차별되지 않은 정보를 얻을 수 있어야한다.간단한 예로 이미지가 제공된다고 했을 때, 시각적으로 불편한 사람은 이미지의 정보를 얻을 수 없다.그렇기에 이미지에 대한 대체 텍스트가 제공되어 텍스트로 정보를 전달할 ..." }, { "title": "Sass &amp; SCSS 란?", "url": "/posts/whatIsSass/", "categories": "css", "tags": "sass, scss, css", "date": "2019-08-31 12:33:39 +0900", "snippet": "최근 프론트쪽을 담당하는 직군의 기술 스택을 보면 Sass를 심심찮게 볼 수 있습니다.그래서 Sass는 무엇인가에 대해서 알아보려고 합니다. 본 글에서는 Sass에 대해서만 알아보며, 문법과 컴파일 방법에 대해서는 다루지 않습니다.Sass 란?Sass는 Syntactically Awesome Style Sheets의 약자이며,CSS를 우리가 조금 더 편하게 사용하기 위해 확장한 언어입니다.그러나 웹에서는 CSS만 직접 동작하기 때문에 Sass는 웹에서 사용하기 위해서는 컴파일을 해주어야 합니다.그러기에 Sass는 CSS Pr..." }, { "title": "CI(codeigniter)의 MVC패턴 프로젝트 경험", "url": "/posts/CodeigniterAndMVC_Use/", "categories": "Architecture", "tags": "Architecture, Design Pattern, Retrospect", "date": "2019-06-05 18:44:39 +0900", "snippet": "회사에서 개발팀에 코드이그나이터를 도입하였다.개발팀에 도입한다고 해서 사실 크게 관심이 없었으며,큰 영향도 없을 것이라고 생각했다.하지만 퍼블리셔 입장에서도 기존의 방식과 조금씩 달랐고하나씩 경험했던 내용을 기록해두려고 한다.Codeigniter란Codeigniter(이하 코드이그나이터)란 PHP로 작성된 웹 프레임워크다.MVC패턴으로 동작한다. MVC에 관한 포스팅기존의 방식과 달라진 퍼블리셔 업무기존의 방식과 제일 크게 달라졌던 점은 역시 MVC패턴을 사용함에 따른 변화이다.이미지와 같이 User가 Url을 통하여 접근하..." }, { "title": "MVC패턴에 대해서", "url": "/posts/whatIsMVC/", "categories": "Architecture", "tags": "Architecture, Design Pattern", "date": "2019-05-09 16:12:39 +0900", "snippet": "MVC 란MVC는 Model, View, Controller의 약자이다.MVC는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴이다.소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있다.User는 Controller에게 요청하고, Controller는 Model에게 명령을 보내고,Model은 해당의 데이터를 View에게 제공하여, User는 View를 통해 정보를 얻을 수 있다.하나 하나의 기능을 자세히 살펴보면 아래와 같다.Model모델(model)이란 어떠한 동작을 수행..." }, { "title": "Require.js 을 사용했던 프로젝트에 대한 회고", "url": "/posts/requirejs_use/", "categories": "javascript", "tags": "javascript, AMD, require.js, Retrospect", "date": "2019-02-10 18:44:39 +0900", "snippet": "기존의 프로젝트를 진행할 때에는 필요한 기능을 전역 함수 파일에 추가하여 사용했다.전역 파일에 기능을 추가하여 사용하다보니 기능이 늘어날 수록 코드는 복잡해져갔으며 모든 페이지에서 불필요한 기능까지 전부 호출하는게 비효율적으로 느껴졌다.그렇기에 최근 알게 되었던 AMD/Require.js에 관심을 더욱 가지게 되었으며, 신규 프로젝트에 Require.js를 사용해보기 했다. AMD / Require.js에 대한 포스팅프로젝트 초반디자인을 보고 퍼블리싱하며, 공통으로 쓰이는 기능과 특정 페이지에서 사용 되는 기능을 파악했다.공..." }, { "title": "HTTP 와 HTTPS, Status Code", "url": "/posts/HTTP_HTTPS_Status_Code/", "categories": "html", "tags": "html, HTTP", "date": "2018-11-18 12:33:39 +0900", "snippet": "HTTP 와 HTTPS 란인터넷을 사용하다보면 HTTP와 HTTPS로 시작되는 주소를 볼 수 있다.어떤 차이가 있어서 HTTP와 HTTPS를 나눠서 쓰는지 알아보려고 한다.HTTPHTTP는 Hyper Text Transfer Protocol의 약자로World Wide Web에서 사용되는 기본 프로토콜이며 이 프로토콜은 메시지가 형식화되고전송되는 방법과 다양한 명령에 대한 응답으로 웹 서버와 브라우저가 수행해야하는 작업을 정의한다.HTTPSHTTPS는 Hyper Text Transfer Protocol over Secure so..." }, { "title": "AMP Conference", "url": "/posts/amp_conference/", "categories": "conference", "tags": "conference", "date": "2018-11-05 20:00:39 +0900", "snippet": "AMP(Accelerated Mobile Pages)AMP는 Accelerated Mobile Pages의 약자로 Google에서 만든 오픈소스이며,웹 페이지를 빠르고 번개와 같이 즉시 로딩 될 수 있게모바일 웹의 성능을 높이기 위한 목적을 가지고 있는 오픈소스 라이브러리다.AMP의 특징AMP의 특징으로는 즉시 페이지를 로드한다는 큰 틀안에서 이루어진다.비동기 스크립트만을 이용하여 페이지의 성능을 개선하고,이미지와 iframe 등도 다운로드 전에 크기와 위치를 잡아 성능을 개선한다.또한 css를 인라인으로 작성하여 호출할 때 ..." }, { "title": "Node.js 란?", "url": "/posts/node_init/", "categories": "nodejs", "tags": "nodejs", "date": "2018-07-08 15:00:39 +0900", "snippet": "Node.js 란?JavaScript는 Browser에서 작동하는 JavaScript와 V8 JavaScript 엔진으로 빌드된 JavaScript 런타임 환경에서 돌아가는 JavaScript가 있다.Node.js는 V8 JavaScript 엔진으로 빌드된 JavaScript 런타임 환경에서 돌아가는 JavaScript 이다.런타임 환경에서 JavaScript로 서버를 구성할 수 있는 것일 뿐, Node.js 자체는 서버가 아니다. node.js !== 서버Browser에서 돌아가는 JavaScript와 런타임 환경에서 돌아..." }, { "title": "AMD &amp; require.js", "url": "/posts/AMD_requirejs/", "categories": "javascript", "tags": "javascript, AMD, require.js", "date": "2018-06-23 15:44:39 +0900", "snippet": "AMDAMD(Asynchronous Module Definition)란 모듈을 정의하는 방법과 모듈이 필요할 때 비동기로 로딩하는 방법을 정의한 API 이다.AMD는 세 가지의 핵심 개념을 가지고 동작한다.1. 동적 로딩동적 로딩(Dynamic Loading, Lazy Loading)은 페이지 렌더링을 방해하지 않으면서 필요한 파일만 로딩할 수 있다.브라우저는 문서를 위에서 아래로 읽어내려오며, &amp;lt;script&amp;gt; 태그를 만나면 &amp;lt;script&amp;gt;의 HTTP 요청과 다운로드, 파싱(P..." }, { "title": "Javascript Call Stack and Event Loop", "url": "/posts/Call_Stack_and_Event_Loop/", "categories": "javascript", "tags": "javascript", "date": "2018-05-11 12:00:39 +0900", "snippet": "Call Stack and Event Loop 호출 스택 및 이벤트 루프자바 스크립트 엔진javascript 를 해석하고 실행하는 인터프리터. 인터프리터 : 프로그래밍 언어의 소스 코드를 바로 실행하는 컴퓨터 프로그램 또는 환경을 말한다.엔진에는 4가지로 구성되어있다. Heap CallStack EventQueue EventLoopHeap객체나 변수 값들이 들어가있는 영역으로 메모리의 할당이 일어나는 곳이다.CallStackCall Stack은 코드 실행에 따라 호출 스택(task)이 쌓이는 곳이다.자바스크립트는 기..." }, { "title": "Javascript 실행 컨텍스트", "url": "/posts/Execution_Context/", "categories": "javascript", "tags": "javascript", "date": "2018-05-04 12:11:39 +0900", "snippet": "Javascript 실행 컨텍스트실행 컨테스트란자바스크립트가 실행될 때 생성되는 실행 단위를 실행 컨텍스트라고 부른다.자바스크립트가 실행되면 함수들이 차곡차곡 콜 스택(Call Stack)이라 곳에 쌓이는데,실행 컨텍스트는 Call Stack에 쌓이는 하나하나의 실행 정보이다.console.log(&#39;전역 스코프&#39;);function first(){ console.log(&#39;First Context&#39;); second();}function second(){ console.log(&#39;Second ..." }, { "title": "How do you stop event propagation?", "url": "/posts/stop_event_propagation/", "categories": "javascript", "tags": "javascript", "date": "2018-04-09 12:11:39 +0900", "snippet": "How do you stop event propagation? 이벤트 전파를 어떻게 중지합니까?이벤트 전파란?html&amp;lt;div class=&quot;boxDiv click01&quot;&amp;gt; &amp;lt;p&amp;gt;3&amp;lt;/p&amp;gt; &amp;lt;div class=&quot;boxDiv click02&quot;&amp;gt; &amp;lt;p&amp;gt;2&amp;lt;/p&amp;gt; &amp;lt;div class=&quot;boxDiv ..." }, { "title": "Where do you place the JavaScript?", "url": "/posts/Where_do_you_place_the_JavaScript/", "categories": "javascript", "tags": "javascript", "date": "2018-03-29 08:11:39 +0900", "snippet": "Where do you place the JavaScript? JavaScript는 어디에 두어야합니까?1. Head, Body&amp;lt;head&amp;gt; 섹션에 삽입하거나 &amp;lt;body&amp;gt; 섹션의 시작 부분에 놓는 방법은 안좋다.해당 부분에 위치시킬 경우 문서는 페이지 로드시페이지를 읽다가 &amp;lt;script&amp;gt; 를 만날 경우 페이지의 분석을 멈추고스크립트를 로드한 후 페이지를 읽기 때문에 성능면에서 안좋다.브라우저가 웹 사이트를 로드 할 때 일어나는 일 문서 가져 온다 (예..." } ]
